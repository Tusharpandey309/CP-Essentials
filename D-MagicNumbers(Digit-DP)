#include <bits/stdc++.h>
using namespace std;

const long long MOD = 1000000007;  // as in the original Codeforces problem
long long dp[2001][2][2001];       // dp array for memoization
int m, d;
string l, r;

vector<int> convertStringToArr(string s) {
    vector<int> arr;
    arr.push_back(0);  // keep 1-based indexing
    for (auto it : s) {
        arr.push_back(it - '0');
    }
    return arr;
}

long long f(int ind, int flag, int modulo, vector<int> &arr) {
    if (ind == arr.size()) {
        return (modulo == 0);  // valid if divisible by m
    }

    if (dp[ind][flag][modulo] != -1) return dp[ind][flag][modulo];

    long long cnt = 0;

    if (ind % 2 == 0) {
        // even index → must place digit d
        if (flag == 1 || d <= arr[ind]) {
            int newFlag = flag;
            if (d < arr[ind]) newFlag = 1;
            cnt = (cnt + f(ind + 1, newFlag, (modulo * 10 + d) % m, arr)) % MOD;
        }
    } else {
        // odd index → any digit except d
        int limit = (flag == 0 ? arr[ind] : 9);

        for (int num = 0; num <= limit; num++) {
            if (num == d) continue;

            int newFlag = flag;
            if (num < arr[ind]) newFlag = 1;

            cnt = (cnt + f(ind + 1, newFlag, (modulo * 10 + num) % m, arr)) % MOD;
        }
    }

    return dp[ind][flag][modulo] = cnt;
}

bool bruteCheck(vector<int> arr) {
    long long modulo = 0;
    for (int i = 1; i < arr.size(); i++) {
        if ((i % 2 == 0 && arr[i] != d) || (i % 2 == 1 && arr[i] == d)) return false;
        modulo = (modulo * 10 + arr[i]) % m;
    }
    return (modulo == 0);
}

void magicNumbers() {
    cin >> m >> d;
    cin >> l >> r;

    memset(dp, -1, sizeof(dp));
    vector<int> arr = convertStringToArr(r);
    long long ans1 = f(1, 0, 0, arr);  // start from index 1 (skip dummy)

    memset(dp, -1, sizeof(dp));
    arr = convertStringToArr(l);
    long long ans2 = f(1, 0, 0, arr);

    if (bruteCheck(convertStringToArr(l))) cout << (ans1 - ans2 + 1 + MOD) % MOD;
    else cout << (ans1 - ans2 + MOD) % MOD;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    magicNumbers();
    return 0;
}
