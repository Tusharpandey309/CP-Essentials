#include <bits/stdc++.h>
using namespace std;

const int N = 1000005;
int a[N], seg[4 * N];

// Build segment tree
void build(int ind, int low, int high,int flag) {
    if (low == high) {
        seg[ind] = a[low];
        return;
    }
    int mid = (low + high) / 2;
    build(2 * ind + 1, low, mid,!flag);
    build(2 * ind + 2, mid + 1, high,!flag);
    if(flag==0){
        seg[ind] = (seg[2 * ind + 1] | seg[2 * ind + 2]);
    }else{
        seg[ind] = (seg[2 * ind + 1] ^ seg[2 * ind + 2]);
    }
    
}

// Point update: update index idx to val
void update(int ind, int low, int high, int idx, int val,int flag) {
    if (low == high) {
        seg[ind] = val;
        a[idx] = val;
        return;
    }
    int mid = (low + high) / 2;
    if (idx <= mid)
        update(2 * ind + 1, low, mid, idx, val,!flag);
    else
        update(2 * ind + 2, mid + 1, high, idx, val,!flag);

    if(flag==0){
        seg[ind] = (seg[2 * ind + 1] | seg[2 * ind + 2]);
    }else{
        seg[ind] = (seg[2 * ind + 1] ^ seg[2 * ind + 2]);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n,m;
    cin >> n >>m;
    int size=1<<n;
    for (int i = 0; i < size; i++) {
        cin >> a[i];
    }
    int flag=1;
    if(n%2){
        flag=0;
    }
    build(0, 0, size - 1,flag);

    while (m--) {
        int ind,val;
        cin >> ind >> val;
        update(0, 0, size - 1, ind-1, val,flag);
        cout<<seg[0]<<endl;
    }

    return 0;
}
