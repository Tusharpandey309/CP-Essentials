#include <bits/stdc++.h>
using namespace std;

const int N = 100005;
int a[N], seg[4 * N];

// Build segment tree
void build(int ind, int low, int high) {
    if (low == high) {
        seg[ind] = a[low];
        return;
    }
    int mid = (low + high) / 2;
    build(2 * ind + 1, low, mid);
    build(2 * ind + 2, mid + 1, high);
    seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
}

// Query max in range [l, r]
int query(int ind, int low, int high, int l, int r) {
    // Complete overlap
    if (low >= l && high <= r) {
        return seg[ind];
    }
    // No overlap
    if (high < l || low > r) {
        return INT_MIN;
    }
    // Partial overlap
    int mid = (low + high) / 2;
    int left = query(2 * ind + 1, low, mid, l, r);
    int right = query(2 * ind + 2, mid + 1, high, l, r);
    return max(left, right);
}

// Point update: update index idx to val
void update(int ind, int low, int high, int idx, int val) {
    if (low == high) {
        seg[ind] = val;
        a[idx] = val;
        return;
    }
    int mid = (low + high) / 2;
    if (idx <= mid)
        update(2 * ind + 1, low, mid, idx, val);
    else
        update(2 * ind + 2, mid + 1, high, idx, val);

    seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    build(0, 0, n - 1);

    int q;
    cin >> q;
    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            // Query
            int l, r;
            cin >> l >> r;
            cout << query(0, 0, n - 1, l, r) << "\n";
        } else if (type == 2) {
            // Update
            int idx, val;
            cin >> idx >> val;
            update(0, 0, n - 1, idx, val);
        }
    }

    return 0;
}
